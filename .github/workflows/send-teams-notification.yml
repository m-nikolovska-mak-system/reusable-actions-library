name: Send Teams Notification

on:
  workflow_call:
    inputs:
      release_version:
        description: 'Release version'
        required: false
        type: string
        default: ''
      environment:
        description: 'Deployment environment'
        required: false
        type: string
        default: 'Production'
      released_by:
        description: 'Who triggered the release'
        required: false
        type: string
        default: ''
      webhook_url:
        description: 'Microsoft Teams webhook URL (use secrets for security)'
        required: false
        type: string
      title:
        description: 'Notification title'
        required: true
        type: string
      message:
        description: 'Notification message'
        required: true
        type: string
      color:
        description: 'Card color (Attention, Good, Warning, Default)'
        required: false
        type: string
        default: 'Default'
      changed_files:
        description: 'Comma-separated list of changed files'
        required: false
        type: string
        default: ''
      link_url:
        description: 'URL to link to'
        required: false
        type: string
        default: ''
      link_text:
        description: 'Link button text'
        required: false
        type: string
        default: 'View Changes'
    secrets:
      teams_webhook_url:
        description: 'Microsoft Teams webhook URL (preferred over input)'
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Teams message
        uses: m-nikolovska-mak-system/reusable-actions-library/.github/actions/send-teams-message@main
        with:
          webhook_url: ${{ secrets.teams_webhook_url }}
          message: ${{ inputs.message }}

      - name: Prepare Teams message
        id: prepare
        run: |
          webhook_url="${{ secrets.teams_webhook_url }}"
          if [ -z "$webhook_url" ]; then
            webhook_url="${{ inputs.webhook_url }}"
          fi

          if [ -z "$webhook_url" ]; then
            echo "ERROR: No webhook URL provided"
            exit 1
          fi
          facts=""
          
          # Add release info
          if [ -n "${{ inputs.release_version }}" ]; then
            facts+=",{\"title\":\"Release Version\",\"value\":\"${{ inputs.release_version }}\"}"
          fi
          if [ -n "${{ inputs.environment }}" ]; then
            facts+=",{\"title\":\"Environment\",\"value\":\"${{ inputs.environment }}\"}"
          fi
          
          if [ -n "${{ inputs.released_by }}" ]; then
            facts+=",{\"title\":\"Released By\",\"value\":\"${{ inputs.released_by }}\"}"
          fi
          
          # Add changed files
          if [ -n "${{ inputs.changed_files }}" ]; then
            IFS=',' read -ra files <<< "${{ inputs.changed_files }}"
            for file in "${files[@]}"; do
              file=$(echo "$file" | sed 's/"/\\"/g')
              facts+=",{\"title\":\"Changed File\",\"value\":\"${file}\"}"
            done
          fi
          
          facts="${facts:1}"  # Remove leading comma

          actions=""
          if [ -n "${{ inputs.link_url }}" ]; then
            link_text=$(echo "${{ inputs.link_text }}" | sed 's/"/\\"/g')
            link_url=$(echo "${{ inputs.link_url }}" | sed 's/"/\\"/g')
            actions="\"actions\":[{\"type\":\"Action.OpenUrl\",\"title\":\"${link_text}\",\"url\":\"${link_url}\"}],"
          fi

          title=$(echo "${{ inputs.title }}" | sed 's/"/\\"/g')
          message=$(echo "${{ inputs.message }}" | sed 's/"/\\"/g')

          cat > payload.json <<EOF
          {
            "type": "message",
            "attachments": [{
              "contentType": "application/vnd.microsoft.card.adaptive",
              "content": {
                "type": "AdaptiveCard",
                "body": [{
                  "type": "TextBlock",
                  "size": "Large",
                  "weight": "Bolder",
                  "text": "${title}"
                },{
                  "type": "TextBlock",
                  "text": "${message}",
                  "wrap": true
                }${facts:+,{\"type\":\"FactSet\",\"facts\":[$facts]}}],
                ${actions}
                "\$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "version": "1.4"
                       }
          EOF

          echo "Generated payload:"
          cat payload.json

          echo "webhook_url=$webhook_url" >> $GITHUB_OUTPUT
      - name: Send to Teams
        run: |
          response=$(curl -s -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "${{ steps.prepare.outputs.webhook_url }}")

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n -1)
          
          if [[ "$http_code" != 2* ]]; then
            echo "❌ Failed to send Teams notification"
            echo "HTTP Status: $http_code"
            echo "Response: $body"
            exit 1
          fi

          echo "✅ Teams notification sent successfully"
