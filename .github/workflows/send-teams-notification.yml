name: Send Teams Notification

on:
  workflow_call:
    inputs:
      release_version:
        description: 'Release version'
        required: false
        type: string
        default: ''
      released_by:
        description: 'Who triggered the release'
        required: false
        type: string
        default: ''
      webhook_url:
        description: 'Microsoft Teams webhook URL (use secrets for security)'
        required: false
        type: string
      title:
        description: 'Notification title'
        required: true
        type: string
      message:
        description: 'Notification message'
        required: true
        type: string
      color:
        description: 'Card color (Attention, Good, Warning, Default)'
        required: false
        type: string
        default: 'Default'
      changed_files:
        description: 'Comma-separated list of changed files'
        required: false
        type: string
        default: ''
      link_url:
        description: 'URL to link to'
        required: false
        type: string
        default: ''
      link_text:
        description: 'Link button text'
        required: false
        type: string
        default: 'View Release'
    secrets:
      teams_webhook_url:
        description: 'Microsoft Teams webhook URL (preferred over input)'
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
        
    - name: Prepare Teams message
      id: prepare
      run: |
        webhook_url="${{ secrets.teams_webhook_url }}"
        if [ -z "$webhook_url" ]; then
          webhook_url="${{ inputs.webhook_url }}"
        fi
    
        if [ -z "$webhook_url" ]; then
          echo "ERROR: No webhook URL provided"
          exit 1
        fi
    
        # Escape inputs
        title=$(echo "${{ inputs.title }}" | sed 's/"/\\"/g')
        message=$(echo "${{ inputs.message }}" | sed 's/"/\\"/g')
        release_version=$(echo "${{ inputs.release_version }}" | sed 's/"/\\"/g')
        released_by=$(echo "${{ inputs.released_by }}" | sed 's/"/\\"/g')
        link_url=$(echo "${{ inputs.link_url }}" | sed 's/"/\\"/g')
        link_text=$(echo "${{ inputs.link_text }}" | sed 's/"/\\"/g')
    
        # Prepare files section (bullet list)
        files_section=""
        if [ -n "${{ inputs.changed_files }}" ]; then
          IFS=',' read -ra files <<< "${{ inputs.changed_files }}"
          for file in "${files[@]}"; do
            files_section+="\n- $file"
          done
        fi
    
        # Timestamp in CET/CEST
        sudo apt-get install -y tzdata
        export TZ="Europe/Skopje"
        timestamp=$(date '+%Y-%m-%d %H:%M %Z')
    
          
          
        # Create payload
    
        # Build Adaptive Card JSON
        cat > payload.json <<EOF
        {
          "type": "message",
          "attachments": [{
            "contentType": "application/vnd.microsoft.card.adaptive",
            "content": {
              "type": "AdaptiveCard",
              "body": [
                {
                  "type": "TextBlock",
                  "text": "üöÄ ${title}${release_version:+ (Release ${release_version})}",
                  "size": "Large",
                  "weight": "Bolder",
                  "color": "Attention"
                },
                {
                  "type": "TextBlock",
                  "text": "‚ö†Ô∏è **Action Required:** ${message}",
                  "wrap": true
                },
                            {
                  "type": "TextBlock",
                  "text": "üë§ Released By: ${released_by}",
                  "wrap": true
                },
              
                {
                  "type": "TextBlock",
                  "text": "üìÇ Files Changed:",
                  "weight": "Bolder",
                  "wrap": true
                },
                {
                  "type": "TextBlock",
                  "text": "${files_section}",
                  "wrap": true
                },

                {
                  "type": "TextBlock",
                  "text": "üìÖ Timestamp: $(date '+%Y-%m-%d %H:%M %Z')",
                  "wrap": true
                }
              ],
              "actions": [
                {
                  "type": "Action.OpenUrl",
                  "title": "${link_text}",
                  "url": "${link_url}"
                }
              ],
              "\$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
              "version": "1.4"
            }
          }]
        }
        EOF
        
        echo "webhook_url=$webhook_url" >> $GITHUB_OUTPUT
        
        

    - name: Send to Teams
      run: |
          response=$(curl -s -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -d @payload.json \
            "${{ steps.prepare.outputs.webhook_url }}")

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n -1)

          if [[ "$http_code" != 2* ]]; then
            echo "‚ùå Failed to send Teams notification"
            echo "HTTP Status: $http_code"
            echo "Response: $body"
            exit 1
          fi

          echo "‚úÖ Teams notification sent successfully"
